// Generated by CoffeeScript 1.3.3
(function() {
  var $, Kyouen, KyouenData, Line, Point, adjust, createKyouenView, createPlayableKyouen, drawBackground, drawClear, drawKyouen, drawKyouenData, drawStone, getStoneSize, removeDialog, showDialog;

  drawKyouen = function(canvas, kyouen) {
    var ctx, stoneSize, width;
    width = canvas.width;
    stoneSize = getStoneSize(kyouen.size, width);
    ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, width, width);
    ctx.strokeStyle = "rgb(38, 38, 38)";
    ctx.lineWidth = 2;
    ctx.fillStyle = "rgb(0, 218, 0)";
    ctx.fillRect(0, 0, stoneSize * 2 * kyouen.size, stoneSize * 2 * kyouen.size);
    ctx.strokeRect(0, 0, stoneSize * 2 * kyouen.size, stoneSize * 2 * kyouen.size);
    drawBackground(ctx, kyouen.size, stoneSize);
    return drawStone(ctx, kyouen.stage, kyouen.size, stoneSize);
  };

  drawClear = function(canvas, kyouen) {
    var $div;
    if (kyouen.clear !== "1") {
      return;
    }
    $div = $(canvas).parent().attr("title", "クリア済み");
    return $div.children(".stageno").addClass("clear");
  };

  getStoneSize = function(size, width) {
    var stoneSize;
    stoneSize = Math.floor(width / size / 2);
    stoneSize -= width % size;
    return stoneSize;
  };

  drawBackground = function(ctx, size, stoneSize) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= size ? _i <= size : _i >= size; i = 0 <= size ? ++_i : --_i) {
      ctx.beginPath();
      ctx.moveTo(stoneSize * 2 * (i + 0.5), 0);
      ctx.lineTo(stoneSize * 2 * (i + 0.5), stoneSize * 2 * size);
      ctx.closePath();
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(0, stoneSize * 2 * (i + 0.5));
      ctx.lineTo(stoneSize * 2 * size, stoneSize * 2 * (i + 0.5));
      ctx.closePath();
      _results.push(ctx.stroke());
    }
    return _results;
  };

  drawStone = function(ctx, stage, size, stoneSize) {
    var c, i, index, j, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= size ? _i <= size : _i >= size; i = 0 <= size ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= size ? _j <= size : _j >= size; j = 0 <= size ? ++_j : --_j) {
          index = i * size + j;
          c = stage.charAt(index);
          if (c === "0") {
            continue;
          }
          if (c === "1") {
            ctx.fillStyle = "rgb(25, 25, 25)";
          } else {
            if (c === "2") {
              ctx.fillStyle = "rgb(252, 252, 252)";
            }
          }
          ctx.beginPath();
          ctx.arc(stoneSize * 2 * (j + 0.5), stoneSize * 2 * (i + 0.5), stoneSize, 0, Math.PI * 2, false);
          ctx.fill();
          _results1.push(ctx.closePath());
        }
        return _results1;
      })());
    }
    return _results;
  };

  drawKyouenData = function(ctx, kyouenData, stoneSize, size) {
    var cx, cy, line, maxScrnWidth, radius, startX, startY, stopX, stopY;
    ctx.lineWidth = 5;
    ctx.beginPath();
    if (kyouenData.isLine) {
      line = kyouenData.line;
      startX = 0;
      startY = 0;
      stopX = 0;
      stopY = 0;
      maxScrnWidth = stoneSize * 2 * size;
      if (line.a === 0) {
        startX = 0;
        startY = line.getY(0) * stoneSize * 2 + stoneSize;
        stopX = maxScrnWidth;
        stopY = line.getY(0) * stoneSize * 2 + stoneSize;
      } else if (line.b === 0) {
        startX = line.getX(0) * stoneSize * 2 + stoneSize;
        startY = 0;
        stopX = line.getX(0) * stoneSize * 2 + stoneSize;
        stopY = maxScrnWidth;
      } else {
        if (-1 * line.c / line.b > 0) {
          startX = 0;
          startY = line.getY(-0.5) * stoneSize * 2 + stoneSize;
          stopX = maxScrnWidth;
          stopY = line.getY(size - 0.5) * stoneSize * 2 + stoneSize;
        } else {
          startX = line.getX(-0.5) * stoneSize * 2 + stoneSize;
          startY = 0;
          stopX = line.getX(size - 0.5) * stoneSize * 2 + stoneSize;
          stopY = maxScrnWidth;
        }
      }
      ctx.moveTo(startX, startY);
      ctx.lineTo(stopX, stopY);
      ctx.closePath();
    } else {
      cx = kyouenData.center.x * stoneSize * 2 + stoneSize;
      cy = kyouenData.center.y * stoneSize * 2 + stoneSize;
      radius = kyouenData.radius * stoneSize * 2;
      ctx.arc(cx, cy, radius, 0, Math.PI * 2, false);
    }
    return ctx.stroke();
  };

  createPlayableKyouen = function(canvas) {
    var $button, $canvas, $creator, $dialog, $kyouenView, $stageNo, canvasSize, k, kyouen;
    k = new Kyouen(canvas);
    canvasSize = Math.floor(Math.min(document.body.clientWidth, document.body.clientHeight, document.documentElement.clientWidth, document.documentElement.clientHeight) * 0.8);
    canvasSize -= canvasSize % (k.size * 2);
    $kyouenView = $("#kyouenView");
    if (!$kyouenView.length) {
      createKyouenView();
      $kyouenView = $("#kyouenView");
    }
    $kyouenView.overlay();
    $stageNo = $("#stageno0");
    $creator = $("#creator0");
    $canvas = $("#canvas0");
    $button = $("#kyouenButton");
    $dialog = $("#dialog");
    $stageNo.html(k.stageNo);
    $creator.html(k.creator);
    $kyouenView.css({
      width: (canvasSize + 50) + "px",
      height: (canvasSize + 120) + "px"
    });
    $canvas.attr({
      width: canvasSize + "px",
      height: canvasSize + "px",
      "data-stageno": k.stageNo,
      "data-stage": k.stage,
      "data-size": k.size
    });
    $button.css({
      width: Math.floor(canvasSize * 0.8) + "px"
    });
    $button.disableButton();
    kyouen = new Kyouen($canvas[0]);
    $kyouenView.unbind("click");
    $kyouenView.click(function(e) {
      return e.stopPropagation();
    });
    $canvas.unbind("click");
    $canvas.click(function(e) {
      var position, positions;
      $dialog = $("#dialog");
      if ($dialog.length) {
        $dialog.remove();
      }
      position = adjust(e, kyouen);
      kyouen.select(position.x, position.y);
      positions = kyouen.getSelectedStonePositions();
      if (positions.length === 4) {
        return $button.enableButton();
      } else {
        return $button.disableButton();
      }
    });
    $button.unbind("click");
    $button.click(function(e) {
      var ctx, kyouenData, stoneSize;
      kyouenData = kyouen.isKyouenSelected();
      console.log(kyouenData);
      $button.disableButton();
      if (kyouenData != null) {
        $canvas.unbind("click");
        ctx = $canvas[0].getContext("2d");
        stoneSize = getStoneSize(kyouen.size, $canvas[0].width);
        drawKyouenData(ctx, kyouenData, stoneSize, kyouen.size);
        $.post("/page/add", {
          stageNo: kyouen.stageNo
        });
        $(k.canvas).attr({
          "data-clear": "1"
        });
        kyouen.clear = "1";
        drawClear($("#canvas" + kyouen.stageNo)[0], kyouen);
        $stageNo.addClass("clear");
        return showDialog("共円！！");
      } else {
        kyouen.stage = kyouen.stage.replace(/2/g, "1");
        drawKyouen($canvas[0], kyouen);
        return showDialog("共円ではありません。");
      }
    });
    $dialog.remove();
    drawKyouen($canvas[0], k);
    if (k.clear === "1") {
      $stageNo.addClass("clear");
    } else {
      $stageNo.removeClass("clear");
    }
    return $kyouenView.show();
  };

  showDialog = function(message) {
    var $dialog, $dialogMessage, dialogHeight, dialogWidth;
    dialogWidth = $("#kyouenView").width() - 10;
    dialogHeight = 100;
    $dialog = $("#dialog");
    $dialogMessage = $("#dialogMessage");
    if (!$dialog.length) {
      $dialog = $("<div />").attr({
        id: "dialog"
      });
      $dialog.appendTo($("#kyouenView"));
      $dialogMessage = $("<div />").attr({
        id: "dialogMessage"
      }).css({
        lineHeight: dialogHeight + "px"
      }).html(message);
      $dialogMessage.appendTo($dialog);
    }
    $dialog.css({
      width: dialogWidth + "px",
      height: dialogHeight + "px",
      marginTop: -dialogHeight / 2 + "px",
      marginLeft: -dialogWidth / 2 + "px",
      display: "none"
    });
    $dialogMessage.html(message);
    $dialog.click(function(e) {
      return $dialog.remove();
    });
    $dialog.hover(function() {
      $dialog.stop().animate({
        backgroundColor: "#fff",
        color: "#004C9A"
      }, 200);
      return $dialog.css({
        textDecoration: "underline"
      });
    }, function() {
      $dialog.stop().animate({
        backgroundColor: "#eee",
        color: "#333"
      }, 200);
      return $dialog.css({
        textDecoration: "none"
      });
    });
    return $dialog.show(200);
  };

  removeDialog = function() {
    var $dialog;
    $dialog = $("#dialog");
    if (!$dialog) {
      return;
    }
    return $dialog.remove();
  };

  createKyouenView = function() {
    var $button, $canvas, $creator, $kyouenView, $stageNo;
    $kyouenView = $("<div />").attr({
      id: "kyouenView"
    });
    $kyouenView.appendTo($("body"));
    $stageNo = $("<div />").attr({
      id: "stageno0"
    });
    $stageNo.appendTo($kyouenView);
    $creator = $("<div />").attr({
      id: "creator0"
    });
    $creator.appendTo($kyouenView);
    $canvas = $("<canvas />").attr({
      id: "canvas0"
    });
    $canvas.appendTo($kyouenView);
    $button = $("<input />").attr({
      id: "kyouenButton",
      type: "button",
      value: "共円！！"
    });
    return $button.appendTo($kyouenView);
  };

  adjust = function(e, kyouen) {
    var canvasX, canvasY, clientRect, pos, size, stoneSize;
    clientRect = e.target.getBoundingClientRect();
    size = kyouen.size;
    stoneSize = getStoneSize(size, e.target.width);
    canvasX = e.clientX - clientRect.left;
    canvasY = e.clientY - clientRect.top;
    pos = {};
    pos.x = Math.ceil(canvasX / stoneSize / 2) - 1;
    pos.y = Math.ceil(canvasY / stoneSize / 2) - 1;
    return pos;
  };

  $ = jQuery;

  $.fn.extend({
    kyouenView: function(config) {
      var c, canvas, k, _i, _len;
      canvas = $(this);
      for (_i = 0, _len = canvas.length; _i < _len; _i++) {
        c = canvas[_i];
        k = new Kyouen(c);
        drawKyouen(c, k);
        drawClear(c, k);
      }
      return this;
    },
    overlayKyouen: function(config) {
      var targets;
      targets = this;
      return targets.click(function() {
        return createPlayableKyouen($("canvas", this)[0]);
      });
    },
    createPlayableKyouen: function(config) {
      return createPlayableKyouen($("canvas", this)[0]);
    },
    disableButton: function(config) {
      if (this.button) {
        this.button("disable");
        this.button("refresh");
      } else {
        this.attr({
          disabled: "disabled"
        });
      }
      return this;
    },
    enableButton: function(config) {
      if (this.button) {
        this.button("enable");
      } else {
        this.removeAttr("disabled");
      }
      return this;
    }
  });

  String.prototype.replaceCharAt = function(at, replaceChar) {
    var after, before;
    before = this.substring(0, at);
    after = this.slice(at + 1);
    return before + replaceChar + after;
  };

  Kyouen = (function() {

    function Kyouen(canvas) {
      this.obj = this;
      this.canvas = canvas;
      this.stageNo = Number(canvas.getAttribute("data-stageno"));
      this.stage = canvas.getAttribute("data-stage");
      this.size = Number(canvas.getAttribute("data-size"));
      this.creator = canvas.getAttribute("data-creator");
      this.clear = canvas.getAttribute("data-clear");
    }

    Kyouen.prototype.position2Index = function(x, y) {
      return x + y * this.size;
    };

    Kyouen.prototype.index2Position = function(index) {
      var pos;
      pos = new Point(index % this.size, Math.floor(index / this.size));
      return pos;
    };

    Kyouen.prototype.select = function(x, y) {
      var c, index;
      index = this.position2Index(x, y);
      c = this.stage.charAt(index);
      if (c === "1") {
        this.stage = this.stage.replaceCharAt(index, "2");
      } else {
        if (c === "2") {
          this.stage = this.stage.replaceCharAt(index, "1");
        }
      }
      return drawKyouen(this.canvas, this);
    };

    Kyouen.prototype.isKyouenSelected = function() {
      var dist1, dist2, intersection123, intersection234, l12, l23, l34, p1, p2, p3, p4, selectedStonePositions;
      selectedStonePositions = this.getSelectedStonePositions();
      if (selectedStonePositions.length < 4) {
        return null;
      }
      p1 = selectedStonePositions[0];
      p2 = selectedStonePositions[1];
      p3 = selectedStonePositions[2];
      p4 = selectedStonePositions[3];
      l12 = this.getMidperpendicular(p1, p2);
      l23 = this.getMidperpendicular(p2, p3);
      intersection123 = this.getIntersection(l12, l23);
      if (intersection123 == null) {
        l34 = this.getMidperpendicular(p3, p4);
        intersection234 = this.getIntersection(l23, l34);
        if (intersection234 == null) {
          return new KyouenData(p1, p2, p3, p4, true, null, null, new Line(p1, p2));
        }
      } else {
        dist1 = this.getDistance(p1, intersection123);
        dist2 = this.getDistance(p4, intersection123);
        if (Math.abs(dist1 - dist2) < 0.0000001) {
          return new KyouenData(p1, p2, p3, p4, false, intersection123, dist1, null);
        }
      }
      return null;
    };

    Kyouen.prototype.getSelectedStonePositions = function() {
      var c, i, stoneArray, _i, _ref;
      stoneArray = [];
      for (i = _i = 0, _ref = this.size * this.size; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        c = this.stage.charAt(i);
        if (c === "2") {
          stoneArray.push(this.index2Position(i));
        }
      }
      return stoneArray;
    };

    Kyouen.prototype.getDistance = function(p1, p2) {
      return p1.difference(p2).getAbs();
    };

    Kyouen.prototype.getIntersection = function(l1, l2) {
      var det, dx, dy, f1, f2, g1, g2, t1;
      f1 = l1.p2.x - l1.p1.x;
      g1 = l1.p2.y - l1.p1.y;
      f2 = l2.p2.x - l2.p1.x;
      g2 = l2.p2.y - l2.p1.y;
      det = f2 * g1 - f1 * g2;
      if (det === 0) {
        return null;
      }
      dx = l2.p1.x - l1.p1.x;
      dy = l2.p1.y - l1.p1.y;
      t1 = (f2 * dy - g2 * dx) / det;
      return new Point(l1.p1.x + f1 * t1, l1.p1.y + g1 * t1);
    };

    Kyouen.prototype.getMidperpendicular = function(p1, p2) {
      var diff, gradient, midpoint;
      midpoint = this.getMidpoint(p1, p2);
      diff = p1.difference(p2);
      gradient = new Point(diff.y, -1 * diff.x);
      return new Line(midpoint, midpoint.sum(gradient));
    };

    Kyouen.prototype.getMidpoint = function(p1, p2) {
      var midpoint;
      midpoint = new Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);
      return midpoint;
    };

    return Kyouen;

  })();

  Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.sum = function(p2) {
      return new Point(this.x + p2.x, this.y + p2.y);
    };

    Point.prototype.difference = function(p2) {
      return new Point(this.x - p2.x, this.y - p2.y);
    };

    Point.prototype.getAbs = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    return Point;

  })();

  Line = (function() {

    function Line(p1, p2) {
      this.p1 = p1;
      this.p2 = p2;
      this.a = p1.y - p2.y;
      this.b = p2.x - p1.x;
      this.c = p1.x * p2.y - p2.x * p1.y;
    }

    Line.prototype.getY = function(x) {
      var y;
      y = -1 * (this.a * x + this.c) / this.b;
      return y;
    };

    Line.prototype.getX = function(y) {
      var x;
      x = -1 * (this.b * y + this.c) / this.a;
      return x;
    };

    return Line;

  })();

  KyouenData = (function() {

    function KyouenData(p1, p2, p3, p4, isLine, center, radius, line) {
      this.points = [p1, p2, p3, p4];
      this.isLine = isLine;
      this.center = center;
      this.radius = radius;
      this.line = line;
    }

    return KyouenData;

  })();

}).call(this);
