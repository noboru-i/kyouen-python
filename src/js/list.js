// Generated by CoffeeScript 1.3.3
(function() {
  var $, KyouenData, KyouenModel, KyouenView, Line, Point, TumeKyouenView, openKyouen,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  String.prototype.replaceCharAt = function(at, replaceChar) {
    var after, before;
    before = this.substring(0, at);
    after = this.slice(at + 1);
    return before + replaceChar + after;
  };

  KyouenView = (function() {

    function KyouenView(canvas, model) {
      this.canvas = canvas;
      this.model = model;
    }

    KyouenView.prototype.drawKyouen = function() {
      var ctx;
      ctx = this.canvas[0].getContext("2d");
      this.drawBackground(ctx);
      return this.drawStones(ctx);
    };

    KyouenView.prototype.drawClear = function() {
      var $div;
      if (this.model.clear !== "1") {
        return;
      }
      $div = this.canvas.parent().attr("title", "クリア済み");
      return $div.children(".stageno").addClass("clear");
    };

    KyouenView.prototype.getStoneSize = function() {
      var size, stoneSize, width;
      size = this.model.size;
      width = this.canvas.width();
      stoneSize = Math.floor(width / size / 2);
      stoneSize -= width % size;
      return stoneSize;
    };

    KyouenView.prototype.drawBackground = function(ctx) {
      var i, size, stoneSize, width, _i, _results;
      size = this.model.size;
      width = this.canvas.width();
      stoneSize = this.getStoneSize();
      ctx.clearRect(0, 0, width, width);
      ctx.strokeStyle = "rgb(38, 38, 38)";
      ctx.lineWidth = 2;
      ctx.fillStyle = "rgb(0, 218, 0)";
      ctx.fillRect(0, 0, stoneSize * 2 * size, stoneSize * 2 * size);
      ctx.strokeRect(0, 0, stoneSize * 2 * size, stoneSize * 2 * size);
      _results = [];
      for (i = _i = 0; 0 <= size ? _i <= size : _i >= size; i = 0 <= size ? ++_i : --_i) {
        ctx.beginPath();
        ctx.moveTo(stoneSize * 2 * (i + 0.5), 0);
        ctx.lineTo(stoneSize * 2 * (i + 0.5), stoneSize * 2 * size);
        ctx.closePath();
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(0, stoneSize * 2 * (i + 0.5));
        ctx.lineTo(stoneSize * 2 * size, stoneSize * 2 * (i + 0.5));
        ctx.closePath();
        _results.push(ctx.stroke());
      }
      return _results;
    };

    KyouenView.prototype.drawStones = function(ctx) {
      var c, i, index, j, size, stage, stoneSize, _i, _results;
      stage = this.model.stage;
      size = this.model.size;
      stoneSize = this.getStoneSize();
      _results = [];
      for (i = _i = 0; 0 <= size ? _i <= size : _i >= size; i = 0 <= size ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (j = _j = 0; 0 <= size ? _j <= size : _j >= size; j = 0 <= size ? ++_j : --_j) {
            index = i * size + j;
            c = stage.charAt(index);
            switch (c) {
              case "0":
                continue;
              case "1":
                ctx.fillStyle = "rgb(25, 25, 25)";
                break;
              case "2":
                ctx.fillStyle = "rgb(252, 252, 252)";
            }
            ctx.beginPath();
            ctx.arc(stoneSize * 2 * (j + 0.5), stoneSize * 2 * (i + 0.5), stoneSize, 0, Math.PI * 2, false);
            ctx.fill();
            _results1.push(ctx.closePath());
          }
          return _results1;
        })());
      }
      return _results;
    };

    KyouenView.prototype.drawKyouenData = function(ctx, kyouenData) {
      var cx, cy, line, maxScrnWidth, radius, size, startX, startY, stoneSize, stopX, stopY;
      size = this.model.size;
      stoneSize = this.getStoneSize();
      ctx.lineWidth = 5;
      ctx.beginPath();
      if (kyouenData.isLine) {
        line = kyouenData.line;
        startX = 0;
        startY = 0;
        stopX = 0;
        stopY = 0;
        maxScrnWidth = stoneSize * 2 * size;
        if (line.a === 0) {
          startX = 0;
          startY = line.getY(0) * stoneSize * 2 + stoneSize;
          stopX = maxScrnWidth;
          stopY = line.getY(0) * stoneSize * 2 + stoneSize;
        } else if (line.b === 0) {
          startX = line.getX(0) * stoneSize * 2 + stoneSize;
          startY = 0;
          stopX = line.getX(0) * stoneSize * 2 + stoneSize;
          stopY = maxScrnWidth;
        } else {
          if (-1 * line.c / line.b > 0) {
            startX = 0;
            startY = line.getY(-0.5) * stoneSize * 2 + stoneSize;
            stopX = maxScrnWidth;
            stopY = line.getY(size - 0.5) * stoneSize * 2 + stoneSize;
          } else {
            startX = line.getX(-0.5) * stoneSize * 2 + stoneSize;
            startY = 0;
            stopX = line.getX(size - 0.5) * stoneSize * 2 + stoneSize;
            stopY = maxScrnWidth;
          }
        }
        ctx.moveTo(startX, startY);
        ctx.lineTo(stopX, stopY);
        ctx.closePath();
      } else {
        cx = kyouenData.center.x * stoneSize * 2 + stoneSize;
        cy = kyouenData.center.y * stoneSize * 2 + stoneSize;
        radius = kyouenData.radius * stoneSize * 2;
        ctx.arc(cx, cy, radius, 0, Math.PI * 2, false);
      }
      return ctx.stroke();
    };

    KyouenView.prototype.adjust = function(e, kyouen) {
      var canvasX, canvasY, clientRect, pos, size, stoneSize;
      clientRect = e.target.getBoundingClientRect();
      size = kyouen.size;
      stoneSize = this.getStoneSize();
      canvasX = e.clientX - clientRect.left;
      canvasY = e.clientY - clientRect.top;
      pos = {};
      pos.x = Math.ceil(canvasX / stoneSize / 2) - 1;
      pos.y = Math.ceil(canvasY / stoneSize / 2) - 1;
      return pos;
    };

    return KyouenView;

  })();

  openKyouen = function(canvas) {
    var $button, $canvas, $creator, $dialog, $kyouenView, $stageNo, canvasSize, model;
    model = new KyouenModel(canvas);
    canvasSize = Math.floor(Math.min(document.body.clientWidth, document.body.clientHeight, document.documentElement.clientWidth, document.documentElement.clientHeight) * 0.8);
    canvasSize -= canvasSize % (model.size * 2);
    $kyouenView = $("#kyouenView");
    if (!$kyouenView.length) {
      this.createKyouenView();
      $kyouenView = $("#kyouenView");
    }
    $kyouenView.overlay();
    $stageNo = $("#stageno0");
    $creator = $("#creator0");
    $canvas = $("#canvas0");
    $button = $("#kyouenButton");
    $dialog = $("#dialog");
    $stageNo.html(model.stageNo);
    $creator.html(model.creator);
    $kyouenView.css({
      width: (canvasSize + 50) + "px",
      height: (canvasSize + 120) + "px"
    });
    $canvas.attr({
      width: canvasSize + "px",
      height: canvasSize + "px",
      "data-stageno": model.stageNo,
      "data-stage": model.stage,
      "data-size": model.size,
      "data-cretor": model.creator,
      "data-clear": model.clear,
      "class": "kyouenView"
    });
    $button.css({
      width: Math.floor(canvasSize * 0.8) + "px"
    });
    $button.disableButton();
    $kyouenView.unbind("click");
    $kyouenView.click(function(e) {
      return e.stopPropagation();
    });
    $kyouenView.show();
    return $canvas[0];
  };

  TumeKyouenView = (function(_super) {

    __extends(TumeKyouenView, _super);

    function TumeKyouenView(canvas, model) {
      this.canvas = canvas;
      this.model = model;
      TumeKyouenView.__super__.constructor.call(this, this.canvas, this.model);
    }

    TumeKyouenView.prototype.drawKyouen = function() {
      var $button, $dialog, $stageNo,
        _this = this;
      $button = $("#kyouenButton");
      $dialog = $("#dialog");
      this.canvas.unbind("click");
      this.canvas.click(function(e) {
        var position, positions;
        $dialog = $("#dialog");
        if ($dialog.length) {
          $dialog.remove();
        }
        position = _this.adjust(e, _this.model);
        _this.model.select(position.x, position.y);
        TumeKyouenView.__super__.drawKyouen.call(_this, _this.canvas, _this.model);
        positions = _this.model.getSelectedStonePositions();
        if (positions.length === 4) {
          return $button.enableButton();
        } else {
          return $button.disableButton();
        }
      });
      $button.unbind("click");
      $button.click(function(e) {
        var ctx, kyouenData, stoneSize;
        kyouenData = _this.model.isKyouenSelected();
        $button.disableButton();
        if (kyouenData != null) {
          _this.canvas.unbind("click");
          ctx = _this.canvas[0].getContext("2d");
          stoneSize = _this.getStoneSize();
          _this.drawKyouenData(ctx, kyouenData);
          $.post("/page/add", {
            stageNo: _this.model.stageNo
          });
          $(_this.model.canvas).attr({
            "data-clear": "1"
          });
          _this.model.clear = "1";
          _this.drawClear($("#canvas" + _this.model.stageNo)[0], _this.model);
          $stageNo.addClass("clear");
          return _this.showDialog("共円！！");
        } else {
          _this.model.stage = _this.model.stage.replace(/2/g, "1");
          TumeKyouenView.__super__.drawKyouen.call(_this);
          return _this.showDialog("共円ではありません。");
        }
      });
      $dialog.remove();
      TumeKyouenView.__super__.drawKyouen.call(this);
      $stageNo = $("#stageno0");
      if (this.model.clear === "1") {
        return $stageNo.addClass("clear");
      } else {
        return $stageNo.removeClass("clear");
      }
    };

    TumeKyouenView.prototype.showDialog = function(message) {
      var $dialog, $dialogMessage, dialogHeight, dialogWidth;
      dialogWidth = $("#kyouenView").width() - 10;
      dialogHeight = 100;
      $dialog = $("#dialog");
      $dialogMessage = $("#dialogMessage");
      if (!$dialog.length) {
        $dialog = $("<div />").attr({
          id: "dialog"
        });
        $dialog.appendTo($("#kyouenView"));
        $dialogMessage = $("<div />").attr({
          id: "dialogMessage"
        }).css({
          lineHeight: dialogHeight + "px"
        }).html(message);
        $dialogMessage.appendTo($dialog);
      }
      $dialog.css({
        width: dialogWidth + "px",
        height: dialogHeight + "px",
        marginTop: -dialogHeight / 2 + "px",
        marginLeft: -dialogWidth / 2 + "px",
        display: "none"
      });
      $dialogMessage.html(message);
      $dialog.click(function(e) {
        return $dialog.remove();
      });
      $dialog.hover(function() {
        $dialog.stop().animate({
          backgroundColor: "#fff",
          color: "#004C9A"
        }, 200);
        return $dialog.css({
          textDecoration: "underline"
        });
      }, function() {
        $dialog.stop().animate({
          backgroundColor: "#eee",
          color: "#333"
        }, 200);
        return $dialog.css({
          textDecoration: "none"
        });
      });
      return $dialog.show(200);
    };

    TumeKyouenView.prototype.removeDialog = function() {
      var $dialog;
      $dialog = $("#dialog");
      if (!$dialog) {
        return;
      }
      return $dialog.remove();
    };

    TumeKyouenView.prototype.createKyouenView = function() {
      var $button, $canvas, $creator, $kyouenView, $stageNo;
      $kyouenView = $("<div />").attr({
        id: "kyouenView"
      });
      $kyouenView.appendTo($("body"));
      $stageNo = $("<div />").attr({
        id: "stageno0"
      });
      $stageNo.appendTo($kyouenView);
      $creator = $("<div />").attr({
        id: "creator0"
      });
      $creator.appendTo($kyouenView);
      $canvas = $("<canvas />").attr({
        id: "canvas0"
      });
      $canvas.appendTo($kyouenView);
      $button = $("<input />").attr({
        id: "kyouenButton",
        type: "button",
        value: "共円！！"
      });
      return $button.appendTo($kyouenView);
    };

    return TumeKyouenView;

  })(KyouenView);

  KyouenModel = (function() {

    function KyouenModel(canvas) {
      this.stageNo = Number(canvas.getAttribute("data-stageno"));
      this.stage = canvas.getAttribute("data-stage");
      this.size = Number(canvas.getAttribute("data-size"));
      this.creator = canvas.getAttribute("data-creator");
      this.clear = canvas.getAttribute("data-clear");
    }

    KyouenModel.prototype.position2Index = function(x, y) {
      return x + y * this.size;
    };

    KyouenModel.prototype.index2Position = function(index) {
      return new Point(index % this.size, Math.floor(index / this.size));
    };

    KyouenModel.prototype.select = function(x, y) {
      var c, index;
      index = this.position2Index(x, y);
      c = this.stage.charAt(index);
      if (c === "1") {
        return this.stage = this.stage.replaceCharAt(index, "2");
      } else {
        if (c === "2") {
          return this.stage = this.stage.replaceCharAt(index, "1");
        }
      }
    };

    KyouenModel.prototype.isKyouenSelected = function() {
      var dist1, dist2, intersection123, intersection234, l12, l23, l34, p1, p2, p3, p4, selectedStonePositions;
      selectedStonePositions = this.getSelectedStonePositions();
      if (selectedStonePositions.length < 4) {
        return null;
      }
      p1 = selectedStonePositions[0];
      p2 = selectedStonePositions[1];
      p3 = selectedStonePositions[2];
      p4 = selectedStonePositions[3];
      l12 = p1.getMidperpendicular(p2);
      l23 = p2.getMidperpendicular(p3);
      intersection123 = this.getIntersection(l12, l23);
      if (intersection123 == null) {
        l34 = p3.getMidperpendicular(p4);
        intersection234 = this.getIntersection(l23, l34);
        if (intersection234 == null) {
          return new KyouenData(p1, p2, p3, p4, true, null, null, new Line(p1, p2));
        }
      } else {
        dist1 = p1.getDistance(intersection123);
        dist2 = p4.getDistance(intersection123);
        if (Math.abs(dist1 - dist2) < 0.0000001) {
          return new KyouenData(p1, p2, p3, p4, false, intersection123, dist1, null);
        }
      }
      return null;
    };

    KyouenModel.prototype.getSelectedStonePositions = function() {
      var c, i, stoneArray, _i, _ref;
      stoneArray = [];
      for (i = _i = 0, _ref = this.size * this.size; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        c = this.stage.charAt(i);
        if (c === "2") {
          stoneArray.push(this.index2Position(i));
        }
      }
      return stoneArray;
    };

    KyouenModel.prototype.getIntersection = function(l1, l2) {
      var det, dx, dy, f1, f2, g1, g2, t1;
      f1 = l1.p2.x - l1.p1.x;
      g1 = l1.p2.y - l1.p1.y;
      f2 = l2.p2.x - l2.p1.x;
      g2 = l2.p2.y - l2.p1.y;
      det = f2 * g1 - f1 * g2;
      if (det === 0) {
        return null;
      }
      dx = l2.p1.x - l1.p1.x;
      dy = l2.p1.y - l1.p1.y;
      t1 = (f2 * dy - g2 * dx) / det;
      return new Point(l1.p1.x + f1 * t1, l1.p1.y + g1 * t1);
    };

    return KyouenModel;

  })();

  Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.sum = function(p2) {
      return new Point(this.x + p2.x, this.y + p2.y);
    };

    Point.prototype.difference = function(p2) {
      return new Point(this.x - p2.x, this.y - p2.y);
    };

    Point.prototype.getAbs = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Point.prototype.getDistance = function(p2) {
      return this.difference(p2).getAbs();
    };

    Point.prototype.getMidpoint = function(p2) {
      return new Point((this.x + p2.x) / 2, (this.y + p2.y) / 2);
    };

    Point.prototype.getMidperpendicular = function(p2) {
      var diff, gradient, midpoint;
      midpoint = this.getMidpoint(p2);
      diff = this.difference(p2);
      gradient = new Point(diff.y, -1 * diff.x);
      return new Line(midpoint, midpoint.sum(gradient));
    };

    return Point;

  })();

  Line = (function() {

    function Line(p1, p2) {
      this.p1 = p1;
      this.p2 = p2;
      this.a = p1.y - p2.y;
      this.b = p2.x - p1.x;
      this.c = p1.x * p2.y - p2.x * p1.y;
    }

    Line.prototype.getY = function(x) {
      return -1 * (this.a * x + this.c) / this.b;
    };

    Line.prototype.getX = function(y) {
      return -1 * (this.b * y + this.c) / this.a;
    };

    return Line;

  })();

  KyouenData = (function() {

    function KyouenData(p1, p2, p3, p4, isLine, center, radius, line) {
      this.points = [p1, p2, p3, p4];
      this.isLine = isLine;
      this.center = center;
      this.radius = radius;
      this.line = line;
    }

    return KyouenData;

  })();

  $ = jQuery;

  $.fn.extend({
    kyouen: function(config) {
      var c, k, view, _i, _len, _ref;
      _ref = $(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        k = new KyouenModel(c);
        view = new KyouenView($(c), k);
        view.drawKyouen();
        view.drawClear();
      }
      return this;
    },
    overlayPlayableKyouen: function(config) {
      return this.click(function() {
        var c, k, view;
        c = openKyouen($("canvas", this)[0]);
        k = new KyouenModel(c);
        view = new TumeKyouenView($(c), k);
        view.drawKyouen();
        return view.drawClear();
      });
    },
    tumeKyouen: function(config) {
      var c, k, view;
      c = $("canvas", this)[0];
      k = new KyouenModel(c);
      view = new TumeKyouenView($(c), k);
      view.drawKyouen();
      return view.drawClear();
    },
    disableButton: function(config) {
      if (this.button) {
        this.button("disable");
        this.button("refresh");
      } else {
        this.attr({
          disabled: "disabled"
        });
      }
      return this;
    },
    enableButton: function(config) {
      if (this.button) {
        this.button("enable");
      } else {
        this.removeAttr("disabled");
      }
      return this;
    }
  });

}).call(this);
